services:
  account_api:
    container_name: account_api
    build:
      context: ./backend
      dockerfile: docker/account.Dockerfile
    command: poetry run python account/main.py
#    command: sleep infinity
    volumes:
      - ./backend/account/accounts/:/home/python_user/account/accounts/
      - ./backend/account/django_core/:/home/python_user/account/django_core/
      - ./backend/account/utils/:/home/python_user/account/utils/
      - ./backend/account/rest_api/:/home/python_user/account/rest_api/
      - ./backend/account/permissions/:/home/python_user/account/permissions/
    ports:
      - "8081:8081"
    env_file:
      - backend/account/.env
    depends_on:
      - postgres
    links:
      - postgres:pgsql-server
    networks:
      - backend

  postgres:
    container_name: postgres
    image: postgres:latest
    restart: always
    env_file:
      - ./.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./create-multiple-postgresql-databases.sh:/docker-entrypoint-initdb.d/create-multiple-postgresql-databases.sh
    networks:
      - backend

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=pgadmin4@pgadmin.org
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "5050:5050"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - backend

  redis:
    image: redis:7.2.5-alpine3.20
    container_name: redis
    volumes:
      - redis-data:/data
    networks:
      - backend

  nginx:
    build:
      context: ./nginx
      dockerfile: nginx.Dockerfile
    container_name: nginx
    ports:
      - "3000:3000"
    depends_on:
      - account_api
    networks:
      - frontend
      - backend

  users_frontend:
    container_name: users_frontend
    build:
      context: ./frontend
      dockerfile: docker/users.Dockerfile
      target: dev
    restart: always
    command: yarn dev --port 3001
#    command: sleep infinity
    environment:
      - NODE_ENV=development
    volumes:
      - ./frontend/users:/users
      - /users/node_modules
      - /users/.next
    ports:
      - 3001:3001
    networks:
      - frontend

  admin_panel:
    container_name: admin_frontend
    build:
      context: ./frontend
      dockerfile: docker/admin.Dockerfile
      target: dev
    restart: always
    command: yarn dev --port 3002
#    command: sleep infinity
    environment:
      - NODE_ENV=development
    volumes:
      - ./frontend/admin/:/admin
      - /admin/node_modules
      - /admin/.next
    ports:
      - 3002:3002
    networks:
      - frontend

volumes:
  postgres_data:
  pgadmin_data:
  redis-data:

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
